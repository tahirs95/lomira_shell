{"version":3,"sources":["Component/Book/index.js","App.js","serviceWorker.js","index.js"],"names":["Book","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","count","loadBooks","bind","assertThisInitialized","state","books","axios","post","username","promise","status","setState","prevState","data","console","log","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","scope","length","customer","Component","App","react_router_dom","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAQqBA,uCACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,EACXP,EAAKQ,UAAYR,EAAKQ,UAAUC,KAAfR,OAAAS,EAAA,EAAAT,CAAAD,IACjBA,EAAKW,MAAQ,CACXC,MAAM,IALSZ,mFAWjBG,KAAKK,oKASM,oBACWK,IAAMC,KAAK,gCAAiC,CAAEC,SADzD,oBACLC,SAEI,MADKA,EAAQC,SAIrBd,KAAKe,SAAS,SAACC,GAAD,MAAc,CACxBP,MAAMI,EAAQI,QAErBC,QAAQC,IAAInB,KAAKQ,MAAMC,2IAKtB,OACEW,EAAAC,EAAAC,cAAA,WAEHF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CAChBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,UACAJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpLV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAGlBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BQ,GAAG,0BAC7CX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,QAAsCJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,kBAKxCH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,uBACjBH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,KACAZ,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,iBACAZ,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,kBACAZ,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,gBACAZ,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,kBACAZ,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,gBACAZ,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,oBACAZ,EAAAC,EAAAC,cAAA,MAAIU,MAAM,OAAV,gBAGJZ,EAAAC,EAAAC,cAAA,aACNF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,UAAKtB,KAAKQ,MAAMC,MAAMwB,OAAO,GAAGjC,KAAKQ,MAAMC,MAAM,GAAGyB,UAEpDd,EAAAC,EAAAC,cAAA,UAAKtB,KAAKQ,MAAMC,MAAMwB,OAAO,GAAGjC,KAAKQ,MAAMC,MAAM,GAAGyB,qBArElBC,cCQnBC,mLARX,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW9C,YAJvBwC,aCMEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.53252a95.chunk.js","sourcesContent":["import React,{ Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n\r\n\r\nexport default class Book extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.count=1;\r\n    this.loadBooks = this.loadBooks.bind(this);\r\n    this.state = {\r\n      books:[],\r\n      };\r\n  }\r\n\r\n  componentDidMount() {\r\n   \r\n    this.loadBooks();\r\n  \r\n  }\r\n  \r\n  \r\n  \r\n  async loadBooks()\r\n  { \r\n \r\nconst username=\"beezy123\";\r\n    const promise = await axios.post(\"http://127.0.0.1:8000/portal/\", { username });\r\n    const status = promise.status;\r\n  if(status===200)\r\n    { \r\n       \r\n      this.setState((prevState)=>({\r\n          books:promise.data,\r\n      }));\r\n   console.log(this.state.books)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div >\r\n\r\n   <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n  <a className=\"navbar-brand\" href=\"#\">Lomira</a>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n  <ul className=\"navbar-nav\">\r\n      <li className=\"nav-item \">\r\n        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n      </li>\r\n      </ul>\r\n  </div>\r\n</nav>\r\n      <table className=\"table table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">Customer Name</th>\r\n          <th scope=\"col\">Purchased Date</th>\r\n          <th scope=\"col\">Truck Number</th>\r\n          <th scope=\"col\">Gallons Pumped</th>\r\n          <th scope=\"col\">Gross Amount</th>\r\n          <th scope=\"col\">Price Per Gallon</th>\r\n          <th scope=\"col\">Net Amount</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>  \r\n<tr>\r\n<td>{this.state.books.length>0 ?this.state.books[0].customer :false}\r\n</td>\r\n<td>{this.state.books.length>0 ?this.state.books[1].customer :false}\r\n</td>\r\n</tr>\r\n         </tbody>\r\n    </table>\r\n</div>\r\n      )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Book from \"./Component/Book/index\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" exact component={Book} />\n    </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}